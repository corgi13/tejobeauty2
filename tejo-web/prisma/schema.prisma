// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  slug        String   @unique
  categoryId  String
  imageUrl    String?
  inStock     Boolean  @default(true)
  stockCount  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category     @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  excerpt   String?
  imageUrl  String?
  author    String?
  slug      String   @unique
  isPublished Boolean @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_posts")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  customerName  String
  customerEmail String
  customerPhone String
  status        OrderStatus @default(PENDING)
  totalAmount   Decimal     @db.Decimal(10, 2)
  paymentMethod String?
  shippingAddress Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  productName String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
