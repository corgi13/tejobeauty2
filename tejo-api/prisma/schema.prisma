// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  phone         String?
  address       String?
  city          String?
  postalCode    String?
  country       String?
  isAdmin       Boolean   @default(false)
  isVerified    Boolean   @default(false)
  verificationToken String? @unique
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  customerGroup String?
  loyaltyPoints Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  reviews       Review[]
  auditLogs     AuditLog[]
  recentlyViewed RecentlyViewed[]
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  verificationToken String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  price       Decimal   @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  images      String[]
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  brand       String?
  sku         String?   @unique
  stock       Int       @default(0)
  weight      Decimal?  @db.Decimal(8, 2)
  dimensions  String?
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  isNew       Boolean   @default(false)
  isOnSale    Boolean   @default(false)
  rating      Decimal   @db.Decimal(3, 2) @default(0)
  reviewCount Int       @default(0)
  howToUse    String?
  ingredients String?
  tags        String[]
  metaTitle   String?
  metaDescription String?
  searchKeywords String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
  recentlyViewed RecentlyViewed[]
}

model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku        String   @unique
  name       String   // e.g., "50ml", "Red", "Large"
  price      Decimal? @db.Decimal(10, 2) // Override product price if different
  stock      Int      @default(0)
  weight     Decimal? @db.Decimal(8, 2)
  attributes Json     // { size: "50ml", color: "Red", scent: "Lavender" }
  images     String[]
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderItems OrderItem[]
}

model Order {
  id            String      @id @default(cuid())
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  email         String
  firstName     String
  lastName      String
  phone         String?
  address       String
  city          String
  postalCode    String
  country       String
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String
  subtotal      Decimal     @db.Decimal(10, 2)
  discount      Decimal     @db.Decimal(10, 2) @default(0)
  shipping      Decimal     @db.Decimal(10, 2) @default(0)
  total         Decimal     @db.Decimal(10, 2)
  stripeSessionId String?
  molliePaymentId String?
  items         OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  rating    Int
  title     String?
  comment   String?
  images    String[]
  verifiedPurchase Boolean @default(false)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  content   String
  image     String?
  author    String?
  tags      String[]
  isPublished Boolean @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  type        String   // percent, fixed, free_shipping
  value       Decimal  @db.Decimal(10, 2)
  minAmount   Decimal? @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int      @default(0)
  validFrom   DateTime @default(now())
  validUntil  DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebhookEvent {
  id        String   @id @default(cuid())
  provider  String   // stripe, mollie
  eventId   String   @unique
  eventType String
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model RecentlyViewed {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  viewedAt  DateTime @default(now())

  @@unique([userId, productId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

<<<<<<< Current (Your changes)
model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String
  entity    String
  entityId  String?
  createdAt DateTime @default(now())
}

=======
>>>>>>> Incoming (Background Agent changes)
